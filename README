meta-swupdate, Yocto layer for deploy tool
==========================================

This layer's purpose is to add support for a deployment
mechanism of Yocto's images based on swupdate project.

Layer dependencies
------------------

This layer depends on:

URI: git://github.com/openembedded/meta-openembedded.git
subdirectory: meta-oe

BitBake variable expansion
--------------------------

To insert the values of BitBake variables into the update file, pre- and postfix
the names with "<bb-var>...</bb-var>". For example, to automatically set the
version tag, use the line `version = "<bb-var>DISTRO_VERSION</bb-var>";` in your
sw-description file.

Automatic package version generation
------------------------------------

It is possible to generate version pairs from recipes, which then could be
referenced in sw-description file. Typical scenario here is when a component
need to receive a conditional update; in this case sw-descrition file should
have a "version" field to be filled with a value representing a version of
respective component.

Often, components that are referenced in sw-description file are packages
produced by Yocto recipes, and their version should be recorded inside
sw-description file.

This could be done by inheriting the swupdate-ver-collector class inside a
recipe, which provides a component to be included in the SWU file. This class
creates a file in image deployment folder, which contains the name and version
strings of a respective package.

Additionally, packages names that required conditional update should have their
"version" field to be pre- and postfixed with "<pkg-ver>...</pkg-ver>" with the
package name inside it. This would be automatically expanded from version files
provided from packages, which has swupdate-ver-collector inherited.

Image hashing
-------------

During creation of the update file, occurrences of @IMAGE (where IMAGE is an
image filename) are replaced with the sha256 hash of the image.

SWU image signing
------------

There are 3 signing mechanisms supported by meta-swupdate at the moment:

1. RSA signing:

  * Set variable: `SWUPDATE_SIGNING = "RSA"`

  * Set `SWUPDATE_PRIVATE_KEY` to the full path of private key file

2. CMS signing:

  * Set variable: `SWUPDATE_SIGNING = "CMS"`

  * Set `SWUPDATE_CMS_CERT` to the full path of certificate file

  * Set `SWUPDATE_CMS_KEY ` to the full path of private key file

3. Custom signing tool:

  * Set variable: `SWUPDATE_SIGNING = "CUSTOM"`

  * Set variable `SWUPDATE_SIGN_TOOL' to custom string that needs to be
    executed in order to perform the signing

sw-description is signed and the signature is written to sw-description.sig
which is included in the SWU file.

Encrypted private keys are not currently supported since a secure
mechanism must exist to provide the passphrase.

Maintainer
----------

Stefano Babic <sbabic@denx.de>

Submitting patches
------------------

You can submit your patches (or post questions reagarding
this layer to the swupdate Mailing List:

	swupdate@googlegroups.com

When creating patches, please use something like:

    git format-patch -s --subject-prefix='meta-swupdate][PATCH' <revision range>

Please use 'git send-email' to send the generated patches to the ML
to bypass changes from your mailer.
